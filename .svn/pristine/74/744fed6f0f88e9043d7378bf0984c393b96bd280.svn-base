package com.nordicpeak.flowengine.flowapprovalmodule.beans;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.List;

import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "flowapproval_activity_rounds")
@XMLElement(name = "ActivityRound")
public class FlowApprovalActivityRound extends GeneratedElementable {

	public static final Field ACTIVITY_GROUP_RELATION = ReflectionUtils.getField(FlowApprovalActivityRound.class, "activityGroup");
	public static final Field ACTIVITY_PROGRESSES_RELATION = ReflectionUtils.getField(FlowApprovalActivityRound.class, "activityProgresses");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer activityRoundID;

	@DAOManaged(columnName = "activityGroupID")
	@ManyToOne
	@XMLElement
	private FlowApprovalActivityGroup activityGroup;

	@DAOManaged
	@XMLElement
	private Integer flowInstanceID;

	@DAOManaged
	@XMLElement
	private Timestamp added;

	@DAOManaged
	@XMLElement
	private Timestamp completed;

	@DAOManaged
	@XMLElement
	private Timestamp cancelled;

	@DAOManaged
	@XMLElement
	private boolean pdf;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivityProgress> activityProgresses;

	public Integer getActivityRoundID() {

		return activityRoundID;
	}

	public void setActivityRoundID(Integer activityProgressID) {

		this.activityRoundID = activityProgressID;
	}

	public FlowApprovalActivityGroup getActivityGroup() {

		return activityGroup;
	}

	public void setActivityGroup(FlowApprovalActivityGroup activityGroup) {

		this.activityGroup = activityGroup;
	}

	public List<FlowApprovalActivityProgress> getActivityProgresses() {

		return activityProgresses;
	}

	public void setActivityProgresses(List<FlowApprovalActivityProgress> activityProgresses) {

		this.activityProgresses = activityProgresses;
	}

	public Integer getFlowInstanceID() {

		return flowInstanceID;
	}

	public void setFlowInstanceID(Integer flowInstanceID) {

		this.flowInstanceID = flowInstanceID;
	}

	public Timestamp getAdded() {

		return added;
	}

	public void setAdded(Timestamp added) {

		this.added = added;
	}

	public Timestamp getCompleted() {

		return completed;
	}

	public void setCompleted(Timestamp completed) {

		this.completed = completed;
	}

	public Timestamp getCancelled() {

		return cancelled;
	}

	public void setCancelled(Timestamp cancelled) {

		this.cancelled = cancelled;
	}

	public boolean hasPdf() {

		return pdf;
	}

	public void setPdf(boolean pdf) {

		this.pdf = pdf;
	}

	@Override
	public String toString() {

		return getClass().getSimpleName() + " (activityRoundID=" + activityRoundID + ", flowInstanceID=" + flowInstanceID + ", activityGroup=" + activityGroup + ")";
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + (activityRoundID == null ? 0 : activityRoundID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		FlowApprovalActivityRound other = (FlowApprovalActivityRound) obj;
		if (activityRoundID == null) {
			if (other.activityRoundID != null) {
				return false;
			}
		} else if (!activityRoundID.equals(other.activityRoundID)) {
			return false;
		}
		return true;
	}

}
