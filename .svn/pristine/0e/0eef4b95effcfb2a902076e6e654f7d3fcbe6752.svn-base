package com.nordicpeak.flowengine.sharing.beans;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.List;

import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "flowsharing_sources")
@XMLElement
public class Source extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = 526131343673993623L;

	public static final Field FLOWS_FIELD = ReflectionUtils.getField(Source.class, "flows");

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer sourceID;

	@DAOManaged(columnName = "repositoryID")
	@ManyToOne
	@XMLElement
	private Repository repository;

	@DAOManaged
	@OrderBy
	@WebPopulate(required = true, maxLength = 255)
	@XMLElement
	private String name;

	@DAOManaged
	@WebPopulate(required = true, maxLength = 40)
	@XMLElement
	private String username;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	private String password;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean uploadAccess;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<SharedFlow> flows;

	public Integer getSourceID() {

		return sourceID;
	}

	public void setSourceID(Integer sourceID) {

		this.sourceID = sourceID;
	}

	public Repository getRepository() {

		return repository;
	}

	public void setRepository(Repository repository) {

		this.repository = repository;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public String getUsername() {

		return username;
	}

	public void setUsername(String username) {

		this.username = username;
	}

	public String getPassword() {

		return password;
	}

	public void setPassword(String password) {

		this.password = password;
	}

	public List<SharedFlow> getFlows() {

		return flows;
	}

	public void setFlows(List<SharedFlow> flows) {

		this.flows = flows;
	}

	@Override
	public String toString() {

		return name + " (ID=" + sourceID + ")";
	}

	public boolean hasUploadAccess() {

		return uploadAccess;
	}

	public void setUploadAccess(boolean writeAccess) {

		this.uploadAccess = writeAccess;
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + ((sourceID == null) ? 0 : sourceID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Source other = (Source) obj;
		if (sourceID == null) {
			if (other.sourceID != null) {
				return false;
			}
		} else if (!sourceID.equals(other.sourceID)) {
			return false;
		}
		return true;
	}

}
