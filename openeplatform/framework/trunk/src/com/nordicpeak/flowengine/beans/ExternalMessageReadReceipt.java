package com.nordicpeak.flowengine.beans;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.List;

import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.standardutils.collections.CollectionUtils;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateUtils;
import se.unlogic.standardutils.json.JsonArray;
import se.unlogic.standardutils.json.JsonNode;
import se.unlogic.standardutils.json.JsonObject;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.time.TimeUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

import com.nordicpeak.flowengine.interfaces.ImmutableReadReceipt;

@Table(name = "flowengine_external_message_read_receipts")
@XMLElement
public class ExternalMessageReadReceipt extends GeneratedElementable implements ImmutableReadReceipt, Serializable {

	private static final long serialVersionUID = -9033642396491223280L;

	public static final Field ATTACHMENT_DOWNLOADS_RELATION = ReflectionUtils.getField(ExternalMessageReadReceipt.class, "attachmentDownloads");

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer readReceiptID;

	@DAOManaged(columnName = "messageID")
	@ManyToOne
	@XMLElement
	private ExternalMessage message;

	@DAOManaged(dontUpdateIfNull = true, columnName = "userID")
	@XMLElement
	protected User user;

	@DAOManaged(columnName = "messageRead")
	@OrderBy
	@XMLElement
	protected Timestamp read;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<ExternalMessageReadReceiptAttachmentDownload> attachmentDownloads;

	public ExternalMessageReadReceipt() {}

	public ExternalMessageReadReceipt(ExternalMessage message, User user) {

		this.message = message;
		this.user = user;
		this.read = TimeUtils.getCurrentTimestamp();
	}

	@Override
	public String toString() {

		return "(readReceiptID=" + readReceiptID + ", message=" + message + ", user=" + user + ")";
	}

	public JsonNode toJson() {

		JsonObject jsonObject = new JsonObject(5);

		jsonObject.putField("readReceiptID", readReceiptID);
		jsonObject.putField("user", user.getFirstname() + " " + user.getLastname());
		jsonObject.putField("read", DateUtils.DATE_TIME_FORMATTER.format(read));
		jsonObject.putField("attachmentDownloads", ExternalMessageReadReceiptAttachmentDownload.toJson(attachmentDownloads));

		return jsonObject;
	}

	public static JsonNode toJson(List<ExternalMessageReadReceipt> readReceipts) {

		if (CollectionUtils.isEmpty(readReceipts)) {

			return new JsonArray(0);
		}

		JsonArray jsonArray = new JsonArray(readReceipts.size());

		readReceipts.forEach(r -> jsonArray.addNode(r.toJson()));

		return jsonArray;
	}

	public Integer getReadReceiptID() {

		return readReceiptID;
	}

	public void setReadReceiptID(Integer readReceiptID) {

		this.readReceiptID = readReceiptID;
	}

	@Override
	public ExternalMessage getMessage() {

		return message;
	}

	public void setMessage(ExternalMessage message) {

		this.message = message;
	}

	@Override
	public User getUser() {

		return user;
	}

	public void setUser(User user) {

		this.user = user;
	}

	@Override
	public Timestamp getRead() {

		return read;
	}

	public void setRead(Timestamp read) {

		this.read = read;
	}

	public List<ExternalMessageReadReceiptAttachmentDownload> getAttachmentDownloads() {

		return attachmentDownloads;
	}

	public void setAttachmentDownloads(List<ExternalMessageReadReceiptAttachmentDownload> attachmentDownloads) {

		this.attachmentDownloads = attachmentDownloads;
	}

}
