package com.nordicpeak.flowengine.queries.generalmapquery;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.StringPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.validation.ValidationError;
import se.unlogic.standardutils.validation.ValidationException;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLParser;
import se.unlogic.standardutils.xml.XMLValidationUtils;

import com.nordicpeak.flowengine.queries.generalmapquery.configuration.MapTool;

@Table(name = "general_map_query_querytools")
@XMLElement
public class GeneralMapQueryTool extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = -3138130664979293901L;

	public static final Field MAPTOOL_RELATION = ReflectionUtils.getField(GeneralMapQueryTool.class, "mapTool");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer queryToolID;

	@DAOManaged(columnName = "queryID")
	@ManyToOne
	@XMLElement
	private GeneralMapQuery generalMapQuery;

	@DAOManaged(columnName = "toolID")
	@ManyToOne
	@XMLElement
	private MapTool mapTool;

	@DAOManaged
	@XMLElement
	private String tooltip;

	@DAOManaged
	@XMLElement
	private boolean onlyOneGeometry;

	@XMLElement
	private String mapToolAlias;

	public Integer getQueryToolID() {

		return queryToolID;
	}

	public void setQueryToolID(Integer queryToolID) {

		this.queryToolID = queryToolID;
	}

	public GeneralMapQuery getGeneralMapQuery() {

		return generalMapQuery;
	}

	public void setGeneralMapQuery(GeneralMapQuery generalMapQuery) {

		this.generalMapQuery = generalMapQuery;
	}

	public MapTool getMapTool() {

		return mapTool;
	}

	public void setMapTool(MapTool mapTool) {

		this.mapTool = mapTool;
	}

	public String getTooltip() {

		return tooltip;
	}

	public void setTooltip(String tooltip) {

		this.tooltip = tooltip;
	}

	public boolean isOnlyOneGeometry() {

		return onlyOneGeometry;
	}

	public void setOnlyOneGeometry(boolean onlyOneGeometry) {

		this.onlyOneGeometry = onlyOneGeometry;
	}

	public String getMapToolAlias() {

		return mapToolAlias;
	}

	public void setMapToolAlias(String mapToolAlias) {

		this.mapToolAlias = mapToolAlias;
	}

	public void populate(XMLParser xmlParser) throws ValidationException {

		List<ValidationError> errors = new ArrayList<ValidationError>();

		tooltip = XMLValidationUtils.validateParameter("tooltip", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		onlyOneGeometry = xmlParser.getPrimitiveBoolean("onlyOneGeometry");

		XMLParser mapToolParser = xmlParser.getNode("MapTool");

		if (mapToolParser != null) {

			mapToolAlias = mapToolParser.getString("alias");

		} else {

			errors.add(new ValidationError("NoMapToolSet"));
		}

		if (!errors.isEmpty()) {

			throw new ValidationException(errors);
		}

	}
}
