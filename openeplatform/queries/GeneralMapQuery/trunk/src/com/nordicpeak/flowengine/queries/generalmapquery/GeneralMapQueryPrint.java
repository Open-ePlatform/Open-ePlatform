package com.nordicpeak.flowengine.queries.generalmapquery;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.PositiveStringIntegerPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.validation.ValidationError;
import se.unlogic.standardutils.validation.ValidationException;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLParser;
import se.unlogic.standardutils.xml.XMLValidationUtils;

import com.nordicpeak.flowengine.queries.generalmapquery.configuration.MapPrint;

@Table(name = "general_map_query_queryprints")
@XMLElement
public class GeneralMapQueryPrint extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = 898030083260781796L;

	public static final Field MAPPRINT_RELATION = ReflectionUtils.getField(GeneralMapQueryPrint.class, "mapPrint");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer queryPrintID;

	@DAOManaged(columnName = "queryID")
	@ManyToOne
	@XMLElement
	private GeneralMapQuery generalMapQuery;

	@DAOManaged(columnName = "mapPrintID")
	@ManyToOne
	@XMLElement
	private MapPrint mapPrint;

	@DAOManaged
	@XMLElement
	private Integer scale;

	@DAOManaged
	@XMLElement
	private boolean useInPreview;

	@XMLElement
	private String mapPrintAlias;

	public Integer getQueryPrintID() {

		return queryPrintID;
	}

	public void setQueryPrintID(Integer queryPrintID) {

		this.queryPrintID = queryPrintID;
	}

	public GeneralMapQuery getGeneralMapQuery() {

		return generalMapQuery;
	}

	public void setGeneralMapQuery(GeneralMapQuery generalMapQuery) {

		this.generalMapQuery = generalMapQuery;
	}

	public MapPrint getMapPrint() {

		return mapPrint;
	}

	public void setMapPrint(MapPrint mapPrint) {

		this.mapPrint = mapPrint;
	}

	public Integer getScale() {

		return scale;
	}

	public void setScale(Integer scale) {

		this.scale = scale;
	}

	public boolean isUseInPreview() {

		return useInPreview;
	}

	public void setUseInPreview(boolean useInPreview) {

		this.useInPreview = useInPreview;
	}

	public String getMapPrintAlias() {

		return mapPrintAlias;
	}

	public void setMapPrintAlias(String mapPrintAlias) {

		this.mapPrintAlias = mapPrintAlias;
	}

	public void populate(XMLParser xmlParser) throws ValidationException {

		List<ValidationError> errors = new ArrayList<ValidationError>();

		scale = XMLValidationUtils.validateParameter("scale", xmlParser, false, PositiveStringIntegerPopulator.getPopulator(), errors);
		useInPreview = xmlParser.getPrimitiveBoolean("useInPreview");

		XMLParser mapPrintParser = xmlParser.getNode("MapPrint");

		if (mapPrintParser != null) {

			mapPrintAlias = mapPrintParser.getString("alias");

		} else {

			errors.add(new ValidationError("NoMapPrintSet"));
		}

		if (!errors.isEmpty()) {

			throw new ValidationException(errors);
		}

	}

}
