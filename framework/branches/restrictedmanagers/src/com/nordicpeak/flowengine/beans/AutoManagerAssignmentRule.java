package com.nordicpeak.flowengine.beans;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.nordicpeak.flowengine.comparators.GroupNameComparator;

import se.unlogic.hierarchy.core.beans.Group;
import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.hierarchy.core.handlers.GroupHandler;
import se.unlogic.hierarchy.core.handlers.UserHandler;
import se.unlogic.hierarchy.foregroundmodules.usersessionadmin.UserNameComparator;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "flowengine_flow_family_automanager_rules")
@XMLElement
public class AutoManagerAssignmentRule extends GeneratedElementable implements Serializable {
	
	private static final long serialVersionUID = 2906850629442177083L;
	
	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer ruleID;
	
	@XMLElement
	private String generatedRuleID;
	
	@DAOManaged(columnName = "flowFamilyID")
	@ManyToOne
	private FlowFamily flowFamily;
	
	@DAOManaged
	@XMLElement
	private String attributeName;
	
	@DAOManaged
	@XMLElement
	private boolean invert;
	
	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_automanager_rule_values", remoteValueColumnName = "value")
	@XMLElement(fixCase = true)
	private List<String> values;
	
	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_automanager_rule_users", remoteValueColumnName = "userID")
	@XMLElement(fixCase = true)
	private List<Integer> userIDs;
	
	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_automanager_rule_groups", remoteValueColumnName = "groupID")
	@XMLElement(fixCase = true)
	private List<Integer> groupIDs;
	
	@XMLElement(fixCase = true)
	private List<User> users;
	
	@XMLElement(fixCase = true)
	private List<Group> groups;
	
	public Integer getRuleID() {
		return ruleID;
	}
	
	public void setRuleID(Integer ruleID) {
		this.ruleID = ruleID;
	}
	
	public String getGeneratedRuleID() {
		return generatedRuleID;
	}
	
	public void setGeneratedRuleID(String generatedRuleID) {
		this.generatedRuleID = generatedRuleID;
	}
	
	public boolean isInvert() {
		return invert;
	}
	
	public void setInvert(boolean invert) {
		this.invert = invert;
	}
	
	public FlowFamily getFlowFamily() {
		return flowFamily;
	}
	
	public void setFlowFamily(FlowFamily flowFamily) {
		this.flowFamily = flowFamily;
	}
	
	public List<Integer> getUserIDs() {
		return userIDs;
	}
	
	public void setUserIDs(List<Integer> userIDs) {
		this.userIDs = userIDs;
		users = null;
	}
	
	public List<Integer> getGroupIDs() {
		return groupIDs;
	}
	
	public void setGroupIDs(List<Integer> groupIDs) {
		this.groupIDs = groupIDs;
		groups = null;
	}
	
	public String getAttributeName() {
		return attributeName;
	}
	
	public void setAttributeName(String attributeName) {
		this.attributeName = attributeName;
	}
	
	public List<String> getValues() {
		return values;
	}
	
	public void setValues(List<String> values) {
		this.values = values;
	}
	
	public void setUsers(List<User> users) {
		
		this.users = users;
		
		if (users == null) {
			
			userIDs = null;
			
		} else {
			
			userIDs = new ArrayList<Integer>(users.size());
			
			for (User user : users) {
				
				userIDs.add(user.getUserID());
			}
		}
	}
	
	public void setGroups(List<Group> groups) {
		
		this.groups = groups;
		
		if (groups == null) {
			
			groupIDs = null;
			
		} else {
			
			groupIDs = new ArrayList<Integer>(groups.size());
			
			for (Group group : groups) {
				
				groupIDs.add(group.getGroupID());
			}
		}
	}
	
	public void setUsersAndGroups(UserHandler userHandler, GroupHandler groupHandler) {
		
		if (userIDs != null && users == null) {
			
			users = userHandler.getUsers(userIDs, false, true);
			
			if (users != null) {
				Collections.sort(users, UserNameComparator.getInstance());
			}
		}
		
		if (groupIDs != null && groups == null) {
			
			groups = groupHandler.getGroups(groupIDs, false);
			
			if (groups != null) {
				Collections.sort(groups, GroupNameComparator.getInstance());
			}
		}
	}
	
}
