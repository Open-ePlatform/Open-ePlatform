package com.nordicpeak.flowengine.tags;

import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.EnumPopulator;
import se.unlogic.standardutils.populators.StringPopulator;
import se.unlogic.standardutils.validation.ValidationError;
import se.unlogic.standardutils.validation.ValidationException;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLParser;
import se.unlogic.standardutils.xml.XMLParserPopulateable;
import se.unlogic.standardutils.xml.XMLValidationUtils;

import com.nordicpeak.flowengine.enums.TextTagType;

@Table(name = "flowengine_text_tags")
@XMLElement
public class TextTag extends GeneratedElementable implements XMLParserPopulateable{

	private static final EnumPopulator<TextTagType> TAG_TYPE_POPULATOR = new EnumPopulator<TextTagType>(TextTagType.class);
	
	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer textTagID;

	@WebPopulate(required = true, maxLength = 255)
	@DAOManaged
	@XMLElement
	private String name;

	@WebPopulate(maxLength = 255)
	@DAOManaged
	@XMLElement
	private String description;

	@WebPopulate(maxLength = 65535)
	@DAOManaged
	@XMLElement
	private String defaultValue;

	@WebPopulate(required = true)
	@DAOManaged
	@XMLElement
	private TextTagType type;

	public Integer getTextTagID() {

		return textTagID;
	}

	public void setTextTagID(Integer textTagID) {

		this.textTagID = textTagID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public String getDescription() {

		return description;
	}

	public void setDescription(String description) {

		this.description = description;
	}

	public String getDefaultValue() {

		return defaultValue;
	}

	public void setDefaultValue(String defaultValue) {

		this.defaultValue = defaultValue;
	}

	public TextTagType getType() {

		return type;
	}

	public void setType(TextTagType type) {

		this.type = type;
	}

	@Override
	public String toString() {

		return name;
	}

	@Override
	public void populate(XMLParser xmlParser) throws ValidationException {

		List<ValidationError> errors = new ArrayList<ValidationError>();
		
		name = XMLValidationUtils.validateParameter("name", xmlParser, true, 1, 255, StringPopulator.getPopulator(), errors);
		description = XMLValidationUtils.validateParameter("description", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		defaultValue = XMLValidationUtils.validateParameter("defaultValue", xmlParser, false, 1, 65535, StringPopulator.getPopulator(), errors);
		this.type = XMLValidationUtils.validateParameter("type", xmlParser, true, TAG_TYPE_POPULATOR, errors);
		
		if (!errors.isEmpty()) {
			
			throw new ValidationException(errors);
		}		
	}

}
