package com.nordicpeak.flowengine.beans;

import java.awt.Color;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.sql.Blob;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.color.ColorUtils;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.HexColorPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLUtils;

import com.nordicpeak.flowengine.interfaces.ImmutableFlowType;

@Table(name = "flowengine_flow_types")
@XMLElement
public class FlowType extends GeneratedElementable implements Serializable, ImmutableFlowType {

	private static final long serialVersionUID = 7195827633619267170L;

	public static final Field CATEGORIES_RELATION = ReflectionUtils.getField(FlowType.class, "categories");
	public static final Field FLOWS_RELATION = ReflectionUtils.getField(FlowType.class, "flows");
	public static final Field ALLOWED_ADMIN_GROUPS_RELATION = ReflectionUtils.getField(FlowType.class, "allowedAdminGroupIDs");
	public static final Field ALLOWED_ADMIN_USERS_RELATION = ReflectionUtils.getField(FlowType.class, "allowedAdminUserIDs");
	public static final Field ALLOWED_GROUPS_RELATION = ReflectionUtils.getField(FlowType.class, "allowedGroupIDs");
	public static final Field ALLOWED_USERS_RELATION = ReflectionUtils.getField(FlowType.class, "allowedUserIDs");
	public static final Field ALLOWED_QUERIES_RELATION = ReflectionUtils.getField(FlowType.class, "allowedQueryTypes");

	public static final Field ICON_BLOB_FIELD = ReflectionUtils.getField(Flow.class, "icon");

	private transient FlowTypeAdminAccessInterface adminAccessInterface = new FlowTypeAdminAccessInterface(this);
	private transient FlowTypeUserAccessInterface userAccessInterface = new FlowTypeUserAccessInterface(this);

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer flowTypeID;

	@DAOManaged
	@OrderBy
	@WebPopulate(required = true, maxLength = 255)
	@XMLElement
	private String name;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean useAccessFilter;

	@DAOManaged
	@XMLElement
	private String iconFileName;

	@DAOManaged
	private transient Blob icon;

	@DAOManaged
	@WebPopulate(maxLength = 8, populator = HexColorPopulator.class)
	@XMLElement
	private String iconColor;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<Flow> flows;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<Category> categories;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowengine_flow_type_admin_groups", remoteValueColumnName = "groupID")
	@WebPopulate(paramName = "admingroup")
	@XMLElement(childName = "groupID")
	private List<Integer> allowedAdminGroupIDs;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowengine_flow_type_admin_users", remoteValueColumnName = "userID")
	@WebPopulate(paramName = "adminuser")
	@XMLElement(childName = "userID")
	private List<Integer> allowedAdminUserIDs;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowengine_flow_type_groups", remoteValueColumnName = "groupID")
	@WebPopulate(paramName = "group")
	@XMLElement(childName = "groupID")
	private List<Integer> allowedGroupIDs;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowengine_flow_type_users", remoteValueColumnName = "userID")
	@WebPopulate(paramName = "user")
	@XMLElement(childName = "userID")
	private List<Integer> allowedUserIDs;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowengine_flow_type_allowed_queries", remoteValueColumnName = "queryTypeID")
	@WebPopulate(paramName = "queryType")
	@XMLElement(childName = "queryTypeID")
	private List<String> allowedQueryTypes;

	@Override
	public Integer getFlowTypeID() {

		return flowTypeID;
	}

	public void setFlowTypeID(Integer flowTypeID) {

		this.flowTypeID = flowTypeID;
	}

	@Override
	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	@Override
	public List<Category> getCategories() {

		return categories;
	}

	public void setCategories(List<Category> flowCategories) {

		this.categories = flowCategories;
	}

	public List<Integer> getAllowedAdminGroupIDs() {

		return this.allowedAdminGroupIDs;
	}

	public List<Integer> getAllowedAdminUserIDs() {

		return this.allowedAdminUserIDs;
	}

	@Override
	public List<Flow> getFlows() {

		return flows;
	}

	public void setFlows(List<Flow> flows) {

		this.flows = flows;
	}

	@Override
	public List<String> getAllowedQueryTypes() {

		return allowedQueryTypes;
	}

	public void setAllowedQueryTypes(List<String> allowedQueryTypes) {

		this.allowedQueryTypes = allowedQueryTypes;
	}

	@Override
	public String toString() {

		return name + " (ID: " + flowTypeID + ")";
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + ((flowTypeID == null) ? 0 : flowTypeID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		FlowType other = (FlowType) obj;
		if (flowTypeID == null) {
			if (other.flowTypeID != null) {
				return false;
			}
		} else if (!flowTypeID.equals(other.flowTypeID)) {
			return false;
		}
		return true;
	}

	public boolean isUseAccessFilter() {

		return useAccessFilter;
	}

	public void setUseAccessFilter(boolean useAccessFilter) {

		this.useAccessFilter = useAccessFilter;
	}

	public String getIconFileName() {

		return iconFileName;
	}

	public void setIconFileName(String iconFileName) {

		this.iconFileName = iconFileName;
	}

	public Blob getIcon() {

		return icon;
	}

	public void setIcon(Blob icon) {

		this.icon = icon;
	}

	public String getIconColor() {

		return iconColor;
	}

	public void setIconColor(String iconColor) {

		this.iconColor = iconColor;
	}

	public List<Integer> getAllowedGroupIDs() {

		return allowedGroupIDs;
	}

	public void setAllowedGroupIDs(List<Integer> allowedGroupIDs) {

		this.allowedGroupIDs = allowedGroupIDs;
	}

	public List<Integer> getAllowedUserIDs() {

		return allowedUserIDs;
	}

	public void setAllowedUserIDs(List<Integer> allowedUserIDs) {

		this.allowedUserIDs = allowedUserIDs;
	}

	public void setAllowedAdminGroupIDs(List<Integer> allowedAdminGroupIDs) {

		this.allowedAdminGroupIDs = allowedAdminGroupIDs;
	}

	public void setAllowedAdminUserIDs(List<Integer> allowedAdminUserIDs) {

		this.allowedAdminUserIDs = allowedAdminUserIDs;
	}

	public FlowTypeAdminAccessInterface getAdminAccessInterface() {

		return adminAccessInterface;
	}

	public FlowTypeUserAccessInterface getUserAccessInterface() {

		return userAccessInterface;
	}

	public Object readResolve() {

		this.adminAccessInterface = new FlowTypeAdminAccessInterface(this);
		this.userAccessInterface = new FlowTypeUserAccessInterface(this);

		return this;
	}

	@Override
	public Element toXML(Document doc) {

		Element element = super.toXML(doc);

		if (iconColor != null) {

			Color color = Color.decode(iconColor);
			Color alphaColor = ColorUtils.getLightenColor(color, 0.5f);
			XMLUtils.appendNewElement(doc, element, "alphaIconColorRGB", alphaColor.getRed() + "," + alphaColor.getGreen() + "," + alphaColor.getBlue());
		}

		return element;
	}

	

}
