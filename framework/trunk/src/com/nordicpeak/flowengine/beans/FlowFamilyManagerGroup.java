package com.nordicpeak.flowengine.beans;

import java.io.Serializable;
import java.util.List;

import se.unlogic.hierarchy.core.beans.Group;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "flowengine_flow_family_manager_groups")
@XMLElement
public class FlowFamilyManagerGroup extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = -3065392853394817211L;
	
	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer managerGroupID;

	@DAOManaged(columnName = "flowFamilyID")
	@ManyToOne
	private FlowFamily flowFamily;

	@DAOManaged
	@XMLElement
	private Integer groupID;

	@DAOManaged
	@XMLElement
	private boolean restricted;
	
	@DAOManaged
	@XMLElement
	private boolean allowUpdatingManagers;
	
	@DAOManaged
	@XMLElement
	private boolean notifyGroupMembersPersonally;
	
	@DAOManaged
	@OneToMany(autoAdd = true, autoGet = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_manager_group_notification_addresses", remoteValueColumnName = "email")
	@XMLElement(childName = "address")
	private List<String> notificationEmailAddresses;

	/** Only for display */
	@XMLElement
	private Group group;

	public FlowFamilyManagerGroup() {}

	public FlowFamilyManagerGroup(Group group) {

		groupID = group.getGroupID();
	}

	public FlowFamily getFlowFamily() {
		return flowFamily;
	}

	public void setFlowFamily(FlowFamily flowFamily) {
		this.flowFamily = flowFamily;
	}

	public Integer getGroupID() {
		return groupID;
	}

	public void setGroupID(Integer groupID) {
		this.groupID = groupID;
	}

	/** Only for display */
	public void setGroup(Group group) {
		this.group = group;
	}

	/** Only for display */
	public Group getGroup() {
		return group;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public boolean isRestricted() {
		return restricted;
	}

	public void setRestricted(boolean restricted) {
		this.restricted = restricted;
	}
	
	public boolean isAllowUpdatingManagers() {
		return allowUpdatingManagers;
	}

	public void setAllowUpdatingManagers(boolean allowUpdatingManagers) {
		this.allowUpdatingManagers = allowUpdatingManagers;
	}
	
	public boolean isNotifyGroupMembersPersonally() {
		return notifyGroupMembersPersonally;
	}
	
	public void setNotifyGroupMembersPersonally(boolean notifyGroupMembersPersonally) {

		this.notifyGroupMembersPersonally = notifyGroupMembersPersonally;
	}

	public List<String> getNotificationEmailAddresses() {

		return notificationEmailAddresses;
	}

	public void setNotificationEmailAddresses(List<String> notificationEmailAddresses) {

		this.notificationEmailAddresses = notificationEmailAddresses;
	}

	@Override
	public String toString() {

		if (group != null) {

			return group + " (restricted=" + restricted + ", allowUpdatingManagers=" + allowUpdatingManagers + ", notifyGroupMembersPersonally=" + notifyGroupMembersPersonally + ")";

		} else {

			return "groupID " + groupID + " (restricted=" + restricted + ", allowUpdatingManagers=" + allowUpdatingManagers + ", notifyGroupMembersPersonally=" + notifyGroupMembersPersonally + ")";
		}
	}

}
