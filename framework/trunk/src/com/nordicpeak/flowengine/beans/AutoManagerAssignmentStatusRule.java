package com.nordicpeak.flowengine.beans;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;

import se.unlogic.hierarchy.core.beans.Group;
import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.hierarchy.core.utils.UserUtils;
import se.unlogic.hierarchy.foregroundmodules.usersessionadmin.UserNameComparator;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

import com.nordicpeak.flowengine.comparators.GroupNameComparator;
import com.nordicpeak.flowengine.utils.FlowFamilyUtils;

@Table(name = "flowengine_flow_family_automanager_status_rules")
@XMLElement
public class AutoManagerAssignmentStatusRule extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = 2906850629442177083L;

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer ruleID;

	@XMLElement
	private String generatedRuleID;

	@DAOManaged(columnName = "flowFamilyID")
	@ManyToOne
	private FlowFamily flowFamily;

	@DAOManaged
	@XMLElement
	private String statusName;

	@DAOManaged
	@XMLElement
	private boolean addManagers;

	@DAOManaged
	@XMLElement
	private boolean removePreviousManagers;

	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_automanager_status_rule_users", remoteValueColumnName = "userID")
	@XMLElement(fixCase = true)
	private List<Integer> userIDs;

	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_automanager_status_rule_groups", remoteValueColumnName = "groupID")
	@XMLElement(fixCase = true)
	private List<Integer> groupIDs;

	@DAOManaged
	@XMLElement
	private boolean sendNotification;

	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowengine_flow_family_automanager_status_rule_emails", remoteValueColumnName = "email")
	@XMLElement(fixCase = true)
	private List<String> emailRecipients;

	@XMLElement(fixCase = true)
	private List<User> users;

	@XMLElement(fixCase = true)
	private List<Group> groups;

	public Integer getRuleID() {

		return ruleID;
	}

	public void setRuleID(Integer ruleID) {

		this.ruleID = ruleID;
	}
	
	public void setGeneratedRuleID(String generatedRuleID) {
		this.generatedRuleID = generatedRuleID;
	}

	public FlowFamily getFlowFamily() {

		return flowFamily;
	}

	public void setFlowFamily(FlowFamily flowFamily) {

		this.flowFamily = flowFamily;
	}

	public String getStatusName() {

		return statusName;
	}

	public void setStatusName(String statusName) {

		this.statusName = statusName;
	}

	public boolean isAddManagers() {

		return addManagers;
	}

	public void setAddManagers(boolean addManagers) {

		this.addManagers = addManagers;
	}

	public List<Integer> getUserIDs() {

		return userIDs;
	}

	public void setUserIDs(List<Integer> userIDs) {

		this.userIDs = userIDs;
		users = null;
	}

	public List<Integer> getGroupIDs() {

		return groupIDs;
	}

	public void setGroupIDs(List<Integer> groupIDs) {

		this.groupIDs = groupIDs;
		groups = null;
	}

	public String getAttributeName() {

		return statusName;
	}

	public void setAttributeName(String attributeName) {

		this.statusName = attributeName;
	}

	public void setUsers(List<User> users) {

		this.users = users;

		if (users == null) {

			userIDs = null;

		} else {

			userIDs = UserUtils.getUserIDs(users);
		}
	}

	public void setGroups(List<Group> groups) {

		this.groups = groups;

		if (groups == null) {

			groupIDs = null;

		} else {

			groupIDs = UserUtils.getGroupIDs(groups);
		}
	}

	public void setUsersAndGroups(List<User> allowedManagers, List<Group> allowedManagerGroups, boolean removeMissingIDs) {

		if (userIDs != null && users == null) {

			users = FlowFamilyUtils.filterSelectedManagerUsers(allowedManagers, userIDs, null);

			if (users != null) {
				Collections.sort(users, UserNameComparator.getInstance());
			}

			if (removeMissingIDs) {

				userIDs = UserUtils.getUserIDs(users);
			}
		}

		if (groupIDs != null && groups == null) {

			groups = FlowFamilyUtils.filterSelectedManagerGroups(allowedManagerGroups, groupIDs, null);

			if (groups != null) {
				Collections.sort(groups, GroupNameComparator.getInstance());
			}

			if (removeMissingIDs) {

				groupIDs = UserUtils.getGroupIDs(groups);
			}
		}
	}

	public boolean isRemovePreviousManagers() {

		return removePreviousManagers;
	}

	public void setRemovePreviousManagers(boolean removePreviousManagers) {

		this.removePreviousManagers = removePreviousManagers;
	}

	public boolean isSendNotification() {
		return sendNotification;
	}

	public void setSendNotification(boolean sendNotification) {
		this.sendNotification = sendNotification;
	}

	public List<String> getEmailRecipients() {
		return emailRecipients;
	}

	public void setEmailRecipients(List<String> emailRecipients) {
		this.emailRecipients = emailRecipients;
	}

	@Override
	public String toString() {

		return "ID: " + ruleID + "(FlowFamily" + flowFamily + ", statusName: " + statusName + ")";
	}

}
