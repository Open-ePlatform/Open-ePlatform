package com.nordicpeak.flowengine.beans;

import java.io.Serializable;

import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.populators.PositiveStringIntegerPopulator;
import se.unlogic.standardutils.string.StringTag;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

import com.nordicpeak.flowengine.enums.ContentType;

@XMLElement
public abstract class BaseStatus extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = -3364854013675598021L;

	@DAOManaged(autoGenerated = true)
	@Key
	@StringTag
	@XMLElement
	protected Integer statusID;

	@DAOManaged
	@OrderBy(priority = 1)
	@StringTag
	@WebPopulate(required = true, maxLength = 255)
	@XMLElement
	protected String name;

	@DAOManaged
	@StringTag
	@WebPopulate(maxLength = 65536)
	@XMLElement
	protected String description;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	protected Integer managingTime;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean newExternalMessagesDisallowed;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	protected Integer newExternalMessagesAllowedDays;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean addExternalMessage;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean addInternalMessage;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean isUserMutable;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean isUserDeletable;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean isAdminMutable;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean isAdminDeletable;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean isRestrictedAdminDeletable;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean requireSigning;

	@DAOManaged
	@WebPopulate
	@XMLElement
	protected boolean useAccessCheck;

	@DAOManaged
	@WebPopulate(required = true)
	@XMLElement
	protected ContentType contentType;

	@DAOManaged
	@OrderBy(priority = 0)
	@XMLElement
	protected Integer sortIndex;

	public BaseStatus() {}

	public BaseStatus(BaseStatus baseStatus) {

		this.name = baseStatus.getName();
		this.description = baseStatus.getDescription();
		this.managingTime = baseStatus.getManagingTime();
		this.newExternalMessagesDisallowed = baseStatus.isNewExternalMessagesDisallowed();
		this.newExternalMessagesAllowedDays = baseStatus.getNewExternalMessagesAllowedDays();
		this.addExternalMessage = baseStatus.isAddExternalMessage();
		this.addInternalMessage = baseStatus.isAddExternalMessage();
		this.isUserMutable = baseStatus.isUserMutable();
		this.isUserDeletable = baseStatus.isUserDeletable();
		this.isAdminMutable = baseStatus.isAdminMutable();
		this.isAdminDeletable = baseStatus.isAdminDeletable();
		this.isRestrictedAdminDeletable = baseStatus.isRestrictedAdminDeletable();
		this.requireSigning = baseStatus.isRequireSigning();
		this.useAccessCheck = baseStatus.isUseAccessCheck();
		this.contentType = baseStatus.getContentType();
		this.sortIndex = baseStatus.getSortIndex();
	}

	@Override
	public String toString() {

		return name + " (ID: " + statusID + ")";
	}

	public Integer getStatusID() {

		return statusID;
	}

	public void setStatusID(Integer statusID) {

		this.statusID = statusID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public String getDescription() {

		return description;
	}

	public void setDescription(String description) {

		this.description = description;
	}

	public Integer getManagingTime() {

		return managingTime;
	}

	public void setManagingTime(Integer managingTime) {

		this.managingTime = managingTime;
	}

	public boolean isNewExternalMessagesDisallowed() {

		return newExternalMessagesDisallowed;
	}

	public void setNewExternalMessagesDisallowed(boolean newExternalMessagesDisallowed) {

		this.newExternalMessagesDisallowed = newExternalMessagesDisallowed;
	}

	public Integer getNewExternalMessagesAllowedDays() {

		return newExternalMessagesAllowedDays;
	}

	public void setNewExternalMessagesAllowedDays(Integer newExternalMessagesAllowedDays) {

		this.newExternalMessagesAllowedDays = newExternalMessagesAllowedDays;
	}

	public boolean isAddExternalMessage() {

		return addExternalMessage;
	}

	public void setAddExternalMessage(boolean addExternalMessage) {

		this.addExternalMessage = addExternalMessage;
	}

	public boolean isAddInternalMessage() {

		return addInternalMessage;
	}

	public void setAddInternalMessage(boolean addInternalMessage) {

		this.addInternalMessage = addInternalMessage;
	}

	public boolean isUserMutable() {

		return isUserMutable;
	}

	public void setUserMutable(boolean isUserMutable) {

		this.isUserMutable = isUserMutable;
	}

	public boolean isUserDeletable() {

		return isUserDeletable;
	}

	public void setUserDeletable(boolean isUserDeletable) {

		this.isUserDeletable = isUserDeletable;
	}

	public boolean isAdminMutable() {

		return isAdminMutable;
	}

	public void setAdminMutable(boolean isAdminMutable) {

		this.isAdminMutable = isAdminMutable;
	}

	public boolean isAdminDeletable() {

		return isAdminDeletable;
	}

	public void setAdminDeletable(boolean isAdminDeletable) {

		this.isAdminDeletable = isAdminDeletable;
	}

	public boolean isRestrictedAdminDeletable() {

		return isRestrictedAdminDeletable;
	}

	public void setRestrictedAdminDeletable(boolean isRestrictedAdminDeletable) {

		this.isRestrictedAdminDeletable = isRestrictedAdminDeletable;
	}

	public boolean isRequireSigning() {

		return requireSigning;
	}

	public void setRequireSigning(boolean requireSigning) {

		this.requireSigning = requireSigning;
	}

	public boolean isUseAccessCheck() {

		return useAccessCheck;
	}

	public void setUseAccessCheck(boolean useAccessCheck) {

		this.useAccessCheck = useAccessCheck;
	}

	public ContentType getContentType() {

		return contentType;
	}

	public void setContentType(ContentType contentType) {

		this.contentType = contentType;
	}

	public Integer getSortIndex() {

		return sortIndex;
	}

	public void setSortIndex(Integer sortIndex) {

		this.sortIndex = sortIndex;
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + (statusID == null ? 0 : statusID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		BaseStatus other = (BaseStatus) obj;
		if (statusID == null) {
			if (other.statusID != null) {
				return false;
			}
		} else if (!statusID.equals(other.statusID)) {
			return false;
		}
		return true;
	}
}