package com.nordicpeak.flowengine.queries.textfieldquery;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.annotations.RequiredIfSet;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.NonNegativeStringIntegerPopulator;
import se.unlogic.standardutils.populators.PositiveStringIntegerPopulator;
import se.unlogic.standardutils.populators.StringPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.validation.ValidationError;
import se.unlogic.standardutils.validation.ValidationException;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLParser;
import se.unlogic.standardutils.xml.XMLParserPopulateable;
import se.unlogic.standardutils.xml.XMLValidationUtils;

import com.nordicpeak.flowengine.populators.XMLElementNamePopulator;

@Table(name = "text_fields")
@XMLElement
public class TextField extends GeneratedElementable implements Serializable, XMLParserPopulateable {

	public static final Field TEXT_FIELD_QUERY_RELATION = ReflectionUtils.getField(TextField.class, "query");

	private static final long serialVersionUID = 8919797448020843470L;

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer textFieldID;

	@DAOManaged
	@WebPopulate(required = true, maxLength = 255)
	@XMLElement
	private String label;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean disabled;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String defaultValue;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean required;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer width;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer minContentLength;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer maxContentLength;

	@DAOManaged
	@OrderBy
	@XMLElement
	private Integer sortIndex;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String formatValidator;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = "formatValidator")
	@XMLElement
	private String invalidFormatMessage;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean setAsAttribute;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = "setAsAttribute")
	@XMLElement
	private String attributeName;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String placeholderText;

	@DAOManaged
	@WebPopulate(maxLength = 255, populator = XMLElementNamePopulator.class)
	@XMLElement
	private String xsdElementName;

	@DAOManaged(columnName = "queryID")
	@ManyToOne
	@XMLElement
	private TextFieldQuery query;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<TextFieldValue> values;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String endpointField;
	
	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean containsPrice;

	public TextField() {}

	public Integer getTextFieldID() {

		return textFieldID;
	}

	public void setTextFieldID(Integer textFieldID) {

		this.textFieldID = textFieldID;
	}

	public TextFieldQuery getQuery() {

		return query;
	}

	public void setQuery(TextFieldQuery query) {

		this.query = query;
	}

	public String getLabel() {

		return label;
	}

	public void setLabel(String name) {

		this.label = name;
	}

	@Override
	public String toString() {

		return label + " (textFieldID: " + textFieldID + ")";
	}

	public boolean isRequired() {

		return required;
	}

	public void setRequired(boolean required) {

		this.required = required;
	}

	public Integer getWidth() {

		return width;
	}

	public void setWidth(Integer width) {

		this.width = width;
	}

	public List<TextFieldValue> getValues() {

		return values;
	}

	public void setValues(List<TextFieldValue> values) {

		this.values = values;
	}

	public String getEndpointField() {

		return endpointField;
	}

	public void setEndpointField(String endpointField) {

		this.endpointField = endpointField;
	}

	public Integer getSortIndex() {

		return sortIndex;
	}

	public void setSortIndex(Integer sortIndex) {

		this.sortIndex = sortIndex;
	}

	public String getFormatValidator() {

		return formatValidator;
	}

	public void setFormatValidator(String formatValidator) {

		this.formatValidator = formatValidator;
	}

	public Integer getMinContentLength() {

		return minContentLength;
	}

	public void setMinContentLength(Integer minContentLength) {

		this.minContentLength = minContentLength;
	}

	public Integer getMaxContentLength() {

		return maxContentLength;
	}

	public void setMaxContentLength(Integer maxContentLength) {

		this.maxContentLength = maxContentLength;
	}

	public String getInvalidFormatMessage() {

		return invalidFormatMessage;
	}

	public void setInvalidFormatMessage(String invalidFormatMessage) {

		this.invalidFormatMessage = invalidFormatMessage;
	}

	@Override
	public void populate(XMLParser xmlParser) throws ValidationException {

		List<ValidationError> errors = new ArrayList<ValidationError>();

		textFieldID = XMLValidationUtils.validateParameter("textFieldID", xmlParser, true, PositiveStringIntegerPopulator.getPopulator(), errors);
		label = XMLValidationUtils.validateParameter("label", xmlParser, true, 1, 255, StringPopulator.getPopulator(), errors);
		required = xmlParser.getPrimitiveBoolean("required");

		width = XMLValidationUtils.validateParameter("width", xmlParser, false, PositiveStringIntegerPopulator.getPopulator(), errors);
		minContentLength = XMLValidationUtils.validateParameter("minContentLength", xmlParser, false, PositiveStringIntegerPopulator.getPopulator(), errors);
		maxContentLength = XMLValidationUtils.validateParameter("maxContentLength", xmlParser, false, PositiveStringIntegerPopulator.getPopulator(), errors);

		sortIndex = XMLValidationUtils.validateParameter("sortIndex", xmlParser, true, NonNegativeStringIntegerPopulator.getPopulator(), errors);
		formatValidator = XMLValidationUtils.validateParameter("formatValidator", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		invalidFormatMessage = XMLValidationUtils.validateParameter("invalidFormatMessage", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		placeholderText = XMLValidationUtils.validateParameter("placeholderText", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);

		attributeName = XMLValidationUtils.validateParameter("attributeName", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);

		defaultValue = XMLValidationUtils.validateParameter("defaultValue", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);

		disabled = xmlParser.getPrimitiveBoolean("disabled");
		
		if(disabled) {
			
			containsPrice = xmlParser.getPrimitiveBoolean("containsPrice");
		}

		if (attributeName != null) {

			setAsAttribute = xmlParser.getPrimitiveBoolean("setAsAttribute");
		}

		xsdElementName = XMLValidationUtils.validateParameter("xsdElementName", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);

		if (!errors.isEmpty()) {

			throw new ValidationException(errors);
		}
	}

	public boolean isSetAsAttribute() {

		return setAsAttribute;
	}

	public void setSetAsAttribute(boolean setAsAttribute) {

		this.setAsAttribute = setAsAttribute;
	}

	public String getAttributeName() {

		return attributeName;
	}

	public void setAttributeName(String attributeName) {

		this.attributeName = attributeName;
	}

	public String getPlaceholderText() {

		return placeholderText;
	}

	public void setPlaceholderText(String placeholderText) {

		this.placeholderText = placeholderText;
	}

	public boolean isDisabled() {

		return disabled;
	}

	public void setDisabled(boolean disabled) {

		this.disabled = disabled;
	}

	public String getDefaultValue() {

		return defaultValue;
	}

	public void setDefaultValue(String defaultValue) {

		this.defaultValue = defaultValue;
	}

	public String getXSDElementName() {

		return xsdElementName;
	}

	public void setXSDElementName(String xsdElementName) {

		this.xsdElementName = xsdElementName;
	}

	
	public boolean isContainsPrice() {
	
		return containsPrice;
	}

	
	public void setContainsPrice(boolean containsPrice) {
	
		this.containsPrice = containsPrice;
	}

}
