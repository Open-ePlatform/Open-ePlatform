package com.nordicpeak.flowengine.flowinstancerafflesummary.beans;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.annotations.RequiredIfSet;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.collections.CollectionUtils;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateStringyfier;
import se.unlogic.standardutils.populators.DatePopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@XMLElement(name = "Round")
@Table(name = "raffle_rounds")
public class RaffleRound extends GeneratedElementable implements Serializable {

	private static final long serialVersionUID = 1192909882382723199L;

	public static final Field FUNDING_FLOWS_RELATION = ReflectionUtils.getField(RaffleRound.class, "raffleFlows");

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer roundID;

	@DAOManaged
	@XMLElement
	private Integer moduleID;

	@DAOManaged
	@XMLElement
	@WebPopulate(required = true)
	private String name;

	@DAOManaged
	@WebPopulate(populator = DatePopulator.class)
	@XMLElement(valueFormatter = DateStringyfier.class)
	private Date startDate;

	@DAOManaged
	@WebPopulate(populator = DatePopulator.class)
	@XMLElement(valueFormatter = DateStringyfier.class)
	private Date endDate;

	@DAOManaged
	@XMLElement
	@WebPopulate
	private Integer addFlowID;

	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@XMLElement(fixCase = true)
	private List<RaffleFlow> raffleFlows;

	@DAOManaged
	@XMLElement
	@WebPopulate
	private boolean overrideStatusChangedNotification;
	
	@DAOManaged
	@XMLElement
	@WebPopulate
	@RequiredIfSet(paramNames = "overrideStatusChangedNotification")
	private String decisionEmailMessage;
	
	@DAOManaged
	@XMLElement
	@WebPopulate
	@RequiredIfSet(paramNames = "overrideStatusChangedNotification")
	private String decisionSMSMessage;

	@Override
	public String toString() {

		return name + " (ID: " + roundID + ")";
	}

	public Integer getRoundID() {

		return roundID;
	}

	public void setRoundID(Integer roundID) {

		this.roundID = roundID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public Integer getModuleID() {

		return moduleID;
	}

	public void setModuleID(Integer moduleID) {

		this.moduleID = moduleID;
	}

	public List<RaffleFlow> getRaffleFlows() {

		return raffleFlows;
	}

	public void setRaffleFlows(List<RaffleFlow> raffleFlows) {

		this.raffleFlows = raffleFlows;
	}

	public List<Integer> getFlowIDs() {

		if (CollectionUtils.isEmpty(raffleFlows)) {

			return null;
		}

		List<Integer> flowIDs = new ArrayList<Integer>(raffleFlows.size());

		for (RaffleFlow raffleFlow : raffleFlows) {

			flowIDs.add(raffleFlow.getFlowID());
		}

		return flowIDs;
	}

	public Date getStartDate() {

		if (startDate == null) {
			return null;
		}

		return startDate;
	}

	public void setStartDate(Date start) {

		this.startDate = start;
	}

	public Date getEndDate() {

		if (endDate == null) {
			return null;
		}

		return endDate;
	}

	public void setEndDate(Date end) {

		this.endDate = end;
	}

	public Integer getAddFlowID() {

		return addFlowID;
	}

	public void setAddFlowID(Integer addFlowID) {

		this.addFlowID = addFlowID;
	}

	public String getDecisionEmailMessage() {

		return decisionEmailMessage;
	}

	public void setDecisionEmailMessage(String decisionEmailMessage) {

		this.decisionEmailMessage = decisionEmailMessage;
	}
	
	public String getDecisionSMSMessage() {

		return decisionSMSMessage;
	}

	public void setDecisionSMSMessage(String decisionSMSMessage) {

		this.decisionSMSMessage = decisionSMSMessage;
	}

	
	public boolean isOverrideStatusChangedNotification() {
	
		return overrideStatusChangedNotification;
	}
	
	public void setOverrideStatusChangedNotification(boolean overrideStatusChangedNotification) {
	
		this.overrideStatusChangedNotification = overrideStatusChangedNotification;
	}
	
}
