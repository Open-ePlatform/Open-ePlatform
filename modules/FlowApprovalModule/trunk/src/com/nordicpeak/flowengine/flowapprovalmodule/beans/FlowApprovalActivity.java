package com.nordicpeak.flowengine.flowapprovalmodule.beans;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.List;

import se.unlogic.emailutils.populators.LowerCaseEmailPopulator;
import se.unlogic.hierarchy.core.beans.Group;
import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.hierarchy.core.interfaces.AccessInterface;
import se.unlogic.hierarchy.core.utils.UserUtils;
import se.unlogic.standardutils.annotations.NoDuplicates;
import se.unlogic.standardutils.annotations.RequiredIfSet;
import se.unlogic.standardutils.annotations.SplitOnLineBreak;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "flowapproval_activities")
@XMLElement(name = "Activity")
public class FlowApprovalActivity extends GeneratedElementable implements AccessInterface {

	public static final Field ACTIVITY_GROUP_RELATION = ReflectionUtils.getField(FlowApprovalActivity.class, "activityGroup");
	public static final Field ACTIVITY_PROGRESSES_RELATION = ReflectionUtils.getField(FlowApprovalActivity.class, "activityProgresses");
	public static final Field USERS_RELATION = ReflectionUtils.getField(FlowApprovalActivity.class, "responsibleUsers");
	public static final Field GROUPS_RELATION = ReflectionUtils.getField(FlowApprovalActivity.class, "responsibleGroups");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer activityID;

	@DAOManaged(columnName = "activityGroupID")
	@ManyToOne
	@XMLElement
	private FlowApprovalActivityGroup activityGroup;

	@DAOManaged
	@OrderBy
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement
	private String name;

	@DAOManaged
	@WebPopulate(maxLength = 65535)
	@XMLElement
	private String description;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowapproval_activity_users", remoteValueColumnName = "userID")
	@XMLElement(fixCase = true)
	private List<User> responsibleUsers;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table = "flowapproval_activity_groups", remoteValueColumnName = "groupID")
	@XMLElement(fixCase = true)
	private List<Group> responsibleGroups;

	@DAOManaged
	@WebPopulate(maxLength = 255, populator = LowerCaseEmailPopulator.class)
	@XMLElement
	private String globalEmailAddress;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String attributeName;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean invert;

	@DAOManaged
	@NoDuplicates
	@SplitOnLineBreak
	@RequiredIfSet(paramNames = "attributeName")
	@WebPopulate(maxLength = 1024)
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowapproval_activity_attribute_values", remoteValueColumnName = "value")
	@XMLElement(fixCase = true)
	private List<String> attributeValues;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivityProgress> activityProgresses;

	public Integer getActivityID() {
		return activityID;
	}

	public void setActivityID(Integer activityID) {
		this.activityID = activityID;
	}

	public FlowApprovalActivityGroup getActivityGroup() {
		return activityGroup;
	}

	public void setActivityGroup(FlowApprovalActivityGroup activityGroup) {
		this.activityGroup = activityGroup;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public List<User> getResponsibleUsers() {
		return responsibleUsers;
	}

	public void setResponsibleUsers(List<User> responsibleUsers) {
		this.responsibleUsers = responsibleUsers;
	}

	public List<Group> getResponsibleGroups() {
		return responsibleGroups;
	}

	public void setResponsibleGroups(List<Group> responsibleGroups) {
		this.responsibleGroups = responsibleGroups;
	}

	public List<FlowApprovalActivityProgress> getActivityProgresses() {
		return activityProgresses;
	}

	public void setActivityProgresses(List<FlowApprovalActivityProgress> activityProgresses) {
		this.activityProgresses = activityProgresses;
	}

	public String getAttributeName() {
		return attributeName;
	}

	public void setAttributeName(String attributeName) {
		this.attributeName = attributeName;
	}

	public boolean isInverted() {
		return invert;
	}

	public void setInverted(boolean invert) {
		this.invert = invert;
	}

	public List<String> getAttributeValues() {
		return attributeValues;
	}

	public void setAttributeValues(List<String> attributeValues) {
		this.attributeValues = attributeValues;
	}

	public String getGlobalEmailAddress() {
		return globalEmailAddress;
	}

	public void setGlobalEmailAddress(String globalEmailAddress) {
		this.globalEmailAddress = globalEmailAddress;
	}

	@Override
	public String toString() {
		return getClass().getSimpleName() + " (activityID=" + activityID + ", activityGroup=" + (activityGroup == null ? null : activityGroup.getActivityGroupID()) + ", name=" + name + ")";
	}

	@Override
	public boolean allowsAdminAccess() {
		return false;
	}

	@Override
	public boolean allowsUserAccess() {
		return false;
	}

	@Override
	public boolean allowsAnonymousAccess() {
		return false;
	}

	@Override
	public Collection<Integer> getAllowedGroupIDs() {
		return UserUtils.getGroupIDs(responsibleGroups);
	}

	@Override
	public Collection<Integer> getAllowedUserIDs() {
		return UserUtils.getUserIDs(responsibleUsers);
	}

}
