package com.nordicpeak.flowengine.flowapprovalmodule.beans;

import java.lang.reflect.Field;
import java.util.List;

import se.unlogic.standardutils.annotations.RequiredIfSet;
import se.unlogic.standardutils.annotations.Templated;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.annotations.enums.RequiredState;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.PositiveStringIntegerPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.string.StringTag;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "flowapproval_activitygroups")
@XMLElement(name = "ActivityGroup")
public class FlowApprovalActivityGroup extends GeneratedElementable implements Comparable<FlowApprovalActivityGroup> {

	public static final Field ACTIVITIES_RELATION = ReflectionUtils.getField(FlowApprovalActivityGroup.class, "activities");
	public static final Field ACTIVIY_ROUNDS_RELATION = ReflectionUtils.getField(FlowApprovalActivityGroup.class, "activityRounds");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer activityGroupID;

	@DAOManaged
	@OrderBy(priority = 1)
	@WebPopulate(maxLength = 255, required = true)
	@StringTag
	@XMLElement
	private String name;

	@DAOManaged
	@OrderBy(priority = 0)
	@XMLElement
	private Integer sortIndex;

	@DAOManaged
	@XMLElement
	private Integer flowFamilyID;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement
	private String startStatus;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement
	private String completeStatus;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = "useApproveDeny")
	@XMLElement
	private String denyStatus;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean useApproveDeny;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = "useCustomApprovedText")
	@XMLElement
	private String approvedText;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = { "useCustomApprovedText", "useApproveDeny" }, requiredState = RequiredState.ALL)
	@XMLElement
	private String deniedText;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean appendCommentsToExternalMessages;
	
	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean allowRestarts;
	
	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean sendActivityGroupStartedEmail;

	@DAOManaged
	@Templated
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String activityGroupStartedEmailSubject;

	@DAOManaged
	@Templated
	@WebPopulate(maxLength = 65535)
	@XMLElement
	private String activityGroupStartedEmailMessage;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer reminderAfterXDays;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivity> activities;
	
	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivityRound> activityRounds;

	@XMLElement
	private Integer activityCount;

	public Integer getActivityGroupID() {

		return activityGroupID;
	}

	public void setActivityGroupID(Integer activityGroupID) {

		this.activityGroupID = activityGroupID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public Integer getFlowFamilyID() {

		return flowFamilyID;
	}

	public void setFlowFamilyID(Integer flowFamilyID) {

		this.flowFamilyID = flowFamilyID;
	}

	public String getStartStatus() {

		return startStatus;
	}

	public void setStartStatus(String startStatus) {

		this.startStatus = startStatus;
	}

	public String getCompleteStatus() {

		return completeStatus;
	}

	public void setCompleteStatus(String completeStatus) {

		this.completeStatus = completeStatus;
	}

	public String getDenyStatus() {

		return denyStatus;
	}

	public void setDenyStatus(String denyStatus) {

		this.denyStatus = denyStatus;
	}

	public boolean isUseApproveDeny() {

		return useApproveDeny;
	}

	public void setUseApproveDeny(boolean useApproveDeny) {

		this.useApproveDeny = useApproveDeny;
	}

	public boolean isAppendCommentsToExternalMessages() {

		return appendCommentsToExternalMessages;
	}

	public void setAppendCommentsToExternalMessages(boolean appendCommentsToExternalMessages) {

		this.appendCommentsToExternalMessages = appendCommentsToExternalMessages;
	}

	public boolean isSendActivityGroupStartedEmail() {

		return sendActivityGroupStartedEmail;
	}

	public void setSendActivityGroupStartedEmail(boolean sendActivityGroupStartedEmail) {

		this.sendActivityGroupStartedEmail = sendActivityGroupStartedEmail;
	}

	public String getActivityGroupStartedEmailSubject() {

		return activityGroupStartedEmailSubject;
	}

	public void setActivityGroupStartedEmailSubject(String activityGroupStartedEmailSubject) {

		this.activityGroupStartedEmailSubject = activityGroupStartedEmailSubject;
	}

	public String getActivityGroupStartedEmailMessage() {

		return activityGroupStartedEmailMessage;
	}

	public void setActivityGroupStartedEmailMessage(String activityGroupStartedEmailMessage) {

		this.activityGroupStartedEmailMessage = activityGroupStartedEmailMessage;
	}

	public List<FlowApprovalActivity> getActivities() {

		return activities;
	}

	public void setActivities(List<FlowApprovalActivity> activities) {

		this.activities = activities;
	}

	public List<FlowApprovalActivityRound> getActivityRounds() {
		return activityRounds;
	}

	public void setActivityRounds(List<FlowApprovalActivityRound> activityRounds) {
		this.activityRounds = activityRounds;
	}

	public Integer getActivityCount() {

		return activityCount;
	}

	public void setActivityCount(Integer activityCount) {

		this.activityCount = activityCount;
	}

	public Integer getSortIndex() {

		return sortIndex;
	}

	public void setSortIndex(Integer sortIndex) {

		this.sortIndex = sortIndex;
	}

	public Integer getReminderAfterXDays() {

		return reminderAfterXDays;
	}

	public void setReminderAfterXDays(Integer reminderAfterXDays) {

		this.reminderAfterXDays = reminderAfterXDays;
	}

	public String getApprovedText() {

		return approvedText;
	}

	public void setApprovedText(String approveText) {

		this.approvedText = approveText;
	}

	public String getDeniedText() {

		return deniedText;
	}

	public void setDeniedText(String denyText) {

		this.deniedText = denyText;
	}

	public boolean isAllowRestarts() {
		return allowRestarts;
	}

	public void setAllowRestarts(boolean allowRestarts) {
		this.allowRestarts = allowRestarts;
	}

	@Override
	public String toString() {

		return StringUtils.toLogFormat(name, 30) + " (activityGroupID: " + activityGroupID + ", flowFamilyID: " + flowFamilyID + ")";
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + ((activityGroupID == null) ? 0 : activityGroupID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		FlowApprovalActivityGroup other = (FlowApprovalActivityGroup) obj;
		if (activityGroupID == null) {
			if (other.activityGroupID != null) {
				return false;
			}
		} else if (!activityGroupID.equals(other.activityGroupID)) {
			return false;
		}
		return true;
	}

	@Override
	public int compareTo(FlowApprovalActivityGroup o) {

		int diff = getSortIndex().compareTo(o.getSortIndex());
		
		if (diff == 0) {
			return activityGroupID.compareTo(o.getActivityGroupID());
		}
		
		return diff;
	}

}
