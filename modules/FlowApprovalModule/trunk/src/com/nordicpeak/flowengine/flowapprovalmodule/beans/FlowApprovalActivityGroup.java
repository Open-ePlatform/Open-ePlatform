package com.nordicpeak.flowengine.flowapprovalmodule.beans;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.annotations.NoDuplicates;
import se.unlogic.standardutils.annotations.RequiredIfSet;
import se.unlogic.standardutils.annotations.SplitOnLineBreak;
import se.unlogic.standardutils.annotations.Templated;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.annotations.enums.RequiredState;
import se.unlogic.standardutils.collections.CaseInsensitiveStringComparator;
import se.unlogic.standardutils.collections.CollectionUtils;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.PositiveStringIntegerPopulator;
import se.unlogic.standardutils.populators.StringPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.string.StringTag;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.validation.ValidationError;
import se.unlogic.standardutils.validation.ValidationException;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLParser;
import se.unlogic.standardutils.xml.XMLParserPopulateable;
import se.unlogic.standardutils.xml.XMLPopulationUtils;
import se.unlogic.standardutils.xml.XMLValidationUtils;

import com.nordicpeak.flowengine.populators.EmailAttributeTagPopulator;

@Table(name = "flowapproval_activitygroups")
@XMLElement(name = "ActivityGroup")
public class FlowApprovalActivityGroup extends GeneratedElementable implements Comparable<FlowApprovalActivityGroup>,XMLParserPopulateable {

	public static final Field ACTIVITIES_RELATION = ReflectionUtils.getField(FlowApprovalActivityGroup.class, "activities");
	public static final Field ACTIVIY_ROUNDS_RELATION = ReflectionUtils.getField(FlowApprovalActivityGroup.class, "activityRounds");
	public static final Field MESSAGE_TEMPLATES_RELATION = ReflectionUtils.getField(FlowApprovalActivityGroup.class, "flowApprovalActivityGroupMessageTemplates");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer activityGroupID;

	@DAOManaged
	@OrderBy(priority = 1)
	@WebPopulate(maxLength = 255, required = true)
	@StringTag
	@XMLElement
	private String name;

	@DAOManaged
	@OrderBy(priority = 0)
	@XMLElement
	private Integer sortIndex;

	@DAOManaged
	@XMLElement
	private Integer flowFamilyID;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement
	private String startStatus;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement
	private String completeStatus;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = "useApproveDeny")
	@XMLElement
	private String denyStatus;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean allowSkip;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean useApproveDeny;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = "useCustomApprovedText")
	@XMLElement
	private String approvedText;

	@DAOManaged
	@WebPopulate(maxLength = 255)
	@RequiredIfSet(paramNames = { "useCustomApprovedText", "useApproveDeny" }, requiredState = RequiredState.ALL)
	@XMLElement
	private String deniedText;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean appendCommentsToExternalMessages;
	
	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean appendCommentsToInternalMessages;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean hideFlowinstanceIDInPDF;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean allowRestarts;
	
	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean onlyRestartIfActivityChanges;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean sendActivityGroupStartedEmail;

	@DAOManaged
	@Templated
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String activityGroupStartedEmailSubject;

	@DAOManaged
	@Templated
	@WebPopulate(maxLength = 65535)
	@XMLElement
	private String activityGroupStartedEmailMessage;

	@DAOManaged
	@WebPopulate(populator = PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer reminderAfterXDays;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean sendActivityGroupCompletedEmail;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean activityGroupCompletedEmailAttachPDF;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean activityGroupCompletedEmailAttachFlowInstancePDF;

	@DAOManaged
	@Templated
	@WebPopulate(maxLength = 255)
	@XMLElement
	private String activityGroupCompletedEmailSubject;

	@DAOManaged
	@Templated
	@WebPopulate(maxLength = 65535)
	@XMLElement
	private String activityGroupCompletedEmailMessage;

	@DAOManaged
	@OneToMany(autoAdd = true, autoGet = true, autoUpdate = true)
	@SimplifiedRelation(table = "flowapproval_activitygroups_notify_completed", remoteValueColumnName = "email")
	@WebPopulate(maxLength = 255, populator = EmailAttributeTagPopulator.class)
	@RequiredIfSet(paramNames = "sendActivityGroupCompletedEmail")
	@SplitOnLineBreak
	@NoDuplicates(comparator = CaseInsensitiveStringComparator.class)
	@XMLElement(fixCase = true, childName = "address")
	private List<String> activityGroupCompletedEmailAddresses;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean suppressChangeStatusManagerNotifications;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivity> activities;

	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivityRound> activityRounds;
	
	@DAOManaged
	@OneToMany
	@XMLElement(fixCase = true)
	private List<FlowApprovalActivityGroupMessageTemplate> flowApprovalActivityGroupMessageTemplates;

	@XMLElement
	private Integer activityCount;

	public Integer getActivityGroupID() {

		return activityGroupID;
	}

	public void setActivityGroupID(Integer activityGroupID) {

		this.activityGroupID = activityGroupID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public Integer getFlowFamilyID() {

		return flowFamilyID;
	}

	public void setFlowFamilyID(Integer flowFamilyID) {

		this.flowFamilyID = flowFamilyID;
	}

	public String getStartStatus() {

		return startStatus;
	}

	public void setStartStatus(String startStatus) {

		this.startStatus = startStatus;
	}

	public String getCompleteStatus() {

		return completeStatus;
	}

	public void setCompleteStatus(String completeStatus) {

		this.completeStatus = completeStatus;
	}

	public String getDenyStatus() {

		return denyStatus;
	}

	public void setDenyStatus(String denyStatus) {

		this.denyStatus = denyStatus;
	}

	public boolean isUseApproveDeny() {

		return useApproveDeny;
	}

	public void setUseApproveDeny(boolean useApproveDeny) {

		this.useApproveDeny = useApproveDeny;
	}

	public boolean isAppendCommentsToExternalMessages() {

		return appendCommentsToExternalMessages;
	}

	public void setAppendCommentsToExternalMessages(boolean appendCommentsToExternalMessages) {

		this.appendCommentsToExternalMessages = appendCommentsToExternalMessages;
	}
	
	public boolean isAppendCommentsToInternalMessages() {

		return appendCommentsToInternalMessages;
	}

	public void setAppendCommentsToInternalMessages(boolean appendCommentsToInternalMessages) {

		this.appendCommentsToInternalMessages = appendCommentsToInternalMessages;
	}

	public boolean isSendActivityGroupStartedEmail() {

		return sendActivityGroupStartedEmail;
	}

	public void setSendActivityGroupStartedEmail(boolean sendActivityGroupStartedEmail) {

		this.sendActivityGroupStartedEmail = sendActivityGroupStartedEmail;
	}

	public String getActivityGroupStartedEmailSubject() {

		return activityGroupStartedEmailSubject;
	}

	public void setActivityGroupStartedEmailSubject(String activityGroupStartedEmailSubject) {

		this.activityGroupStartedEmailSubject = activityGroupStartedEmailSubject;
	}

	public String getActivityGroupStartedEmailMessage() {

		return activityGroupStartedEmailMessage;
	}

	public void setActivityGroupStartedEmailMessage(String activityGroupStartedEmailMessage) {

		this.activityGroupStartedEmailMessage = activityGroupStartedEmailMessage;
	}

	public boolean isSendActivityGroupCompletedEmail() {

		return sendActivityGroupCompletedEmail;
	}

	public void setSendActivityGroupCompletedEmail(boolean sendActivityGroupCompletedEmail) {

		this.sendActivityGroupCompletedEmail = sendActivityGroupCompletedEmail;
	}

	public boolean isActivityGroupCompletedEmailAttachPDF() {

		return activityGroupCompletedEmailAttachPDF;
	}

	public void setActivityGroupCompletedEmailAttachPDF(boolean activityGroupCompletedEmailAttachPDF) {

		this.activityGroupCompletedEmailAttachPDF = activityGroupCompletedEmailAttachPDF;
	}

	public boolean isActivityGroupCompletedEmailAttachFlowInstancePDF() {

		return activityGroupCompletedEmailAttachFlowInstancePDF;
	}

	public void setActivityGroupCompletedEmailAttachFlowInstancePDF(boolean activityGroupCompletedEmailAttachFlowInstancePDF) {

		this.activityGroupCompletedEmailAttachFlowInstancePDF = activityGroupCompletedEmailAttachFlowInstancePDF;
	}

	public String getActivityGroupCompletedEmailSubject() {

		return activityGroupCompletedEmailSubject;
	}

	public void setActivityGroupCompletedEmailSubject(String activityGroupCompletedEmailSubject) {

		this.activityGroupCompletedEmailSubject = activityGroupCompletedEmailSubject;
	}

	public String getActivityGroupCompletedEmailMessage() {

		return activityGroupCompletedEmailMessage;
	}

	public void setActivityGroupCompletedEmailMessage(String activityGroupCompletedEmailMessage) {

		this.activityGroupCompletedEmailMessage = activityGroupCompletedEmailMessage;
	}

	public List<String> getActivityGroupCompletedEmailAddresses() {

		return activityGroupCompletedEmailAddresses;
	}

	public void setActivityGroupCompletedEmailAddresses(List<String> activityGroupCompletedEmailAddresses) {

		this.activityGroupCompletedEmailAddresses = activityGroupCompletedEmailAddresses;
	}

	public List<FlowApprovalActivity> getActivities() {

		return activities;
	}

	public void setActivities(List<FlowApprovalActivity> activities) {

		this.activities = activities;
	}

	public List<FlowApprovalActivityRound> getActivityRounds() {

		return activityRounds;
	}

	public void setActivityRounds(List<FlowApprovalActivityRound> activityRounds) {

		this.activityRounds = activityRounds;
	}

	public Integer getActivityCount() {

		return activityCount;
	}

	public void setActivityCount(Integer activityCount) {

		this.activityCount = activityCount;
	}

	public Integer getSortIndex() {

		return sortIndex;
	}

	public void setSortIndex(Integer sortIndex) {

		this.sortIndex = sortIndex;
	}

	public Integer getReminderAfterXDays() {

		return reminderAfterXDays;
	}

	public void setReminderAfterXDays(Integer reminderAfterXDays) {

		this.reminderAfterXDays = reminderAfterXDays;
	}

	public String getApprovedText() {

		return approvedText;
	}

	public void setApprovedText(String approveText) {

		this.approvedText = approveText;
	}

	public String getDeniedText() {

		return deniedText;
	}

	public void setDeniedText(String denyText) {

		this.deniedText = denyText;
	}

	public boolean isAllowSkip() {

		return allowSkip;
	}

	public void setAllowSkip(boolean allowSkip) {

		this.allowSkip = allowSkip;
	}

	public boolean isAllowRestarts() {

		return allowRestarts;
	}

	public void setAllowRestarts(boolean allowRestarts) {

		this.allowRestarts = allowRestarts;
	}

	public boolean isOnlyRestartIfActivityChanges() {

		return onlyRestartIfActivityChanges;
	}

	public void setOnlyRestartIfActivityChanges(boolean onlyRestartIfActivityChanges) {

		this.onlyRestartIfActivityChanges = onlyRestartIfActivityChanges;
	}

	public boolean isSuppressChangeStatusManagerNotifications() {

		return suppressChangeStatusManagerNotifications;
	}

	public void setSuppressChangeStatusManagerNotifications(boolean suppressChangeStatusManagerNotifications) {

		this.suppressChangeStatusManagerNotifications = suppressChangeStatusManagerNotifications;
	}
	
	public List<FlowApprovalActivityGroupMessageTemplate> getFlowApprovalActivityGroupMessageTemplate() {

		return flowApprovalActivityGroupMessageTemplates;
	}

	public void setFlowApprovalActivityGroupMessageTemplate(List<FlowApprovalActivityGroupMessageTemplate> flowApprovalActivityGroupMessageTemplates) {

		this.flowApprovalActivityGroupMessageTemplates = flowApprovalActivityGroupMessageTemplates;
	}

	@Override
	public String toString() {

		return StringUtils.toLogFormat(name, 30) + " (activityGroupID: " + activityGroupID + ", flowFamilyID: " + flowFamilyID + ")";
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + (activityGroupID == null ? 0 : activityGroupID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		FlowApprovalActivityGroup other = (FlowApprovalActivityGroup) obj;
		if (activityGroupID == null) {
			if (other.activityGroupID != null) {
				return false;
			}
		} else if (!activityGroupID.equals(other.activityGroupID)) {
			return false;
		}
		return true;
	}

	@Override
	public int compareTo(FlowApprovalActivityGroup o) {

		int diff = getSortIndex().compareTo(o.getSortIndex());

		if (diff == 0) {
			return activityGroupID.compareTo(o.getActivityGroupID());
		}

		return diff;
	}

	@Override
	public void populate(XMLParser xmlParser) throws ValidationException {

		List<ValidationError> errors = new ArrayList<>();
		this.name = XMLValidationUtils.validateParameter("name", xmlParser, true, 1, 255, StringPopulator.getPopulator(), errors);		
		this.activityCount = xmlParser.getInt("activityCount");
		this.startStatus = XMLValidationUtils.validateParameter("startStatus", xmlParser, true, 1, 255, StringPopulator.getPopulator(), errors);
		this.completeStatus = XMLValidationUtils.validateParameter("completeStatus", xmlParser, true, 1, 255, StringPopulator.getPopulator(), errors);
		this.denyStatus = XMLValidationUtils.validateParameter("denyStatus", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		this.allowSkip = xmlParser.getPrimitiveBoolean("allowSkip");
		this.useApproveDeny = xmlParser.getPrimitiveBoolean("useApproveDeny");
		this.approvedText = XMLValidationUtils.validateParameter("approvedText", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		this.deniedText = XMLValidationUtils.validateParameter("deniedText", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		this.appendCommentsToExternalMessages = xmlParser.getPrimitiveBoolean("appendCommentsToExternalMessages");
		this.appendCommentsToInternalMessages = xmlParser.getPrimitiveBoolean("appendCommentsToInternalMessages");
		this.hideFlowinstanceIDInPDF = xmlParser.getPrimitiveBoolean("hideFlowinstanceIDInPDF");
		this.allowRestarts = xmlParser.getPrimitiveBoolean("allowRestarts");
		this.onlyRestartIfActivityChanges = xmlParser.getPrimitiveBoolean("onlyRestartIfActivityChanges");
		this.sendActivityGroupStartedEmail = xmlParser.getPrimitiveBoolean("sendActivityGroupStartedEmail");
		this.activityGroupStartedEmailMessage = XMLValidationUtils.validateParameter("activityGroupStartedEmailMessage", xmlParser, false, 1, 65535, StringPopulator.getPopulator(), errors);
		
		this.reminderAfterXDays = xmlParser.getInteger("reminderAfterXDays");
		this.sendActivityGroupCompletedEmail = xmlParser.getPrimitiveBoolean("sendActivityGroupCompletedEmail");
		this.activityGroupCompletedEmailAttachPDF = xmlParser.getPrimitiveBoolean("activityGroupCompletedEmailAttachPDF");
		this.activityGroupCompletedEmailAttachFlowInstancePDF = xmlParser.getPrimitiveBoolean("activityGroupCompletedEmailAttachFlowInstancePDF");
		this.activityGroupStartedEmailSubject = XMLValidationUtils.validateParameter("activityGroupStartedEmailSubject", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		this.activityGroupStartedEmailMessage = XMLValidationUtils.validateParameter("activityGroupStartedEmailMessage", xmlParser, false, 1, 65535, StringPopulator.getPopulator(), errors);		
		this.activityGroupCompletedEmailSubject = XMLValidationUtils.validateParameter("activityGroupCompletedEmailSubject", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		this.activityGroupCompletedEmailMessage = XMLValidationUtils.validateParameter("activityGroupCompletedEmailMessage", xmlParser, false, 1, 65535, StringPopulator.getPopulator(), errors);
		this.activityGroupCompletedEmailAddresses = XMLValidationUtils.validateParameters("ActivityGroupCompletedEmailAddresses/address", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		this.suppressChangeStatusManagerNotifications = xmlParser.getPrimitiveBoolean("suppressChangeStatusManagerNotifications");
		this.activities = XMLPopulationUtils.populateBeans(xmlParser, "Activities/Activity", FlowApprovalActivity.class, errors);
		
		this.flowApprovalActivityGroupMessageTemplates = XMLPopulationUtils.populateBeans(xmlParser, "FlowApprovalActivityGroupMessageTemplates/FlowApprovalActivityGroupMessageTemplate", FlowApprovalActivityGroupMessageTemplate.class, errors);

		
		if(!CollectionUtils.isEmpty(activities)) {
			for (FlowApprovalActivity activity : activities) {
				activity.setActivityGroup(this);
			}
		}
		
		if (!errors.isEmpty()) {

			throw new ValidationException(errors);
		}
	}

}
