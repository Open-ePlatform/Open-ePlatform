
package se.teis.proxy;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This WSDL includes Teis WS common services: UploadMessageStd, UploadMessageBin, GetPerson/FetchPersons, GetProperty/FetchProperties,
 * 			GetStatus, GetMessage and QuestionAnswer.
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "IBixEnvelope", targetNamespace = "http://tieto.com/bix/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface IBixEnvelope {


    /**
     * Operation UploadMessageStd: CDATA version - Demands character data enclosed in one or several CDATA tags. To be used for uploading text
     * 				messages.
     * 				Return data: TransferId or execption. If transfer identity is received Teis has accepted/stored the message for further processing.
     * 			
     * 
     * @param bixStdEnvelope
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "UploadMessageStd", action = "http://tieto.com/bix/IBixEnvelope/UploadMessageStd")
    @WebResult(name = "UploadMessageStdResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "UploadMessageStd", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.UploadMessageStd")
    @ResponseWrapper(localName = "UploadMessageStdResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.UploadMessageStdResponse")
    public String uploadMessageStd(
        @WebParam(name = "BixStdEnvelope", targetNamespace = "http://tieto.com/bix/")
        StdEnvelope bixStdEnvelope);

    /**
     * Operation UploadMessageBin: Base64 version - Demands a Base64 encoded string. To be used for uploading binary data such as pictures or
     * 				PDF files.
     * 				Return data: TransferId or exception. If transfer identity is received Teis has accepted/stored the message for further processing.
     * 			
     * 
     * @param bixBinEnvelope
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "UploadMessageBin", action = "http://tieto.com/bix/IBixEnvelope/UploadMessageBin")
    @WebResult(name = "UploadMessageBinResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "UploadMessageBin", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.UploadMessageBin")
    @ResponseWrapper(localName = "UploadMessageBinResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.UploadMessageBinResponse")
    public String uploadMessageBin(
        @WebParam(name = "BixBinEnvelope", targetNamespace = "http://tieto.com/bix/")
        BinEnvelope bixBinEnvelope);

    /**
     * Operation GetPerson: To be used to verify a person identity (personnummer). Returns zero or one person instance.
     * 				Return data: PersonId as STRING, FirstName as STRING, LastName as STRING, GivenName as STRING, BirthPlace as STRING, CivilStatus as STRING, Address as STRING,
     * 				ZipCode as STRING, City as STRING, Country as STRING, Relation[](RelationPersonId as STRING, RelationShip as STRING, GivenName as STRING, LastName as
     * 				STRING).
     * 			
     * 
     * @param connection
     * @param personId
     * @return
     *     returns se.teis.proxy.Person
     */
    @WebMethod(operationName = "GetPerson", action = "http://tieto.com/bix/IBixEnvelope/GetPerson")
    @WebResult(name = "GetPersonResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "GetPerson", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetPerson")
    @ResponseWrapper(localName = "GetPersonResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetPersonResponse")
    public Person getPerson(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "PersonId", targetNamespace = "http://tieto.com/bix/")
        String personId);

    /**
     * Operation FetchPersons: To be used to search for a person via civilstatus, firstname, lastname, birthplace, address, zip code or city.
     * 				Returns zero to several person instances depending on the given search criteria.
     * 				Return data: PersonId as STRING, FirstName as STRING, LastName as STRING, GivenName as STRING, BirthPlace as STRING, CivilStatus as STRING, Address as STRING,
     * 				ZipCode as STRING, City as STRING, Country as STRING, Relation[](RelationPersonId as STRING, RelationShip as STRING, GivenName as STRING, LastName as
     * 				STRING).
     * 			
     * 
     * @param civilStatus
     * @param lastName
     * @param connection
     * @param address
     * @param zipCode
     * @param firstName
     * @param birthPlace
     * @param city
     * @return
     *     returns se.teis.proxy.ArrayOfPerson
     */
    @WebMethod(operationName = "FetchPersons", action = "http://tieto.com/bix/IBixEnvelope/FetchPersons")
    @WebResult(name = "FetchPersonsResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "FetchPersons", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.FetchPersons")
    @ResponseWrapper(localName = "FetchPersonsResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.FetchPersonsResponse")
    public ArrayOfPerson fetchPersons(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "FirstName", targetNamespace = "http://tieto.com/bix/")
        String firstName,
        @WebParam(name = "LastName", targetNamespace = "http://tieto.com/bix/")
        String lastName,
        @WebParam(name = "Address", targetNamespace = "http://tieto.com/bix/")
        String address,
        @WebParam(name = "ZipCode", targetNamespace = "http://tieto.com/bix/")
        String zipCode,
        @WebParam(name = "City", targetNamespace = "http://tieto.com/bix/")
        String city,
        @WebParam(name = "BirthPlace", targetNamespace = "http://tieto.com/bix/")
        String birthPlace,
        @WebParam(name = "CivilStatus", targetNamespace = "http://tieto.com/bix/")
        String civilStatus);

    /**
     * Operation GetProperty: To be used to verify a property identity (fastighetsidentitet) or name (fastighetsnummer). Returns zero or one
     * 				property instance.
     * 				Return data: PropertyId as STRING, Name as STRING, Address as STRING, BuildingAddress as STRING, Owner[](OwnerId as STRING, GivenName as STRING, LastName as
     * 				STRING).
     * 			
     * 
     * @param connection
     * @param propertyId
     * @param name
     * @return
     *     returns se.teis.proxy.Property
     */
    @WebMethod(operationName = "GetProperty", action = "http://tieto.com/bix/IBixEnvelope/GetProperty")
    @WebResult(name = "GetPropertyResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "GetProperty", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetProperty")
    @ResponseWrapper(localName = "GetPropertyResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetPropertyResponse")
    public Property getProperty(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "PropertyId", targetNamespace = "http://tieto.com/bix/")
        String propertyId,
        @WebParam(name = "Name", targetNamespace = "http://tieto.com/bix/")
        String name);

    /**
     * Operation FetchProperties: To be used to search a property via name, address, building address or owner identity. Returns zero to several
     * 				property instances depending on the given search criteria.
     * 				Return data: PropertyId as STRING, Name as STRING, Address as STRING, BuildingAddress as STRING, Owner[](OwnerId as STRING, GivenName as STRING, LastName as
     * 				STRING).
     * 			
     * 
     * @param connection
     * @param buildingAddress
     * @param address
     * @param ownerId
     * @param name
     * @return
     *     returns se.teis.proxy.ArrayOfProperty
     */
    @WebMethod(operationName = "FetchProperties", action = "http://tieto.com/bix/IBixEnvelope/FetchProperties")
    @WebResult(name = "FetchPropertiesResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "FetchProperties", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.FetchProperties")
    @ResponseWrapper(localName = "FetchPropertiesResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.FetchPropertiesResponse")
    public ArrayOfProperty fetchProperties(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "Name", targetNamespace = "http://tieto.com/bix/")
        String name,
        @WebParam(name = "Address", targetNamespace = "http://tieto.com/bix/")
        String address,
        @WebParam(name = "BuildingAddress", targetNamespace = "http://tieto.com/bix/")
        String buildingAddress,
        @WebParam(name = "OwnerId", targetNamespace = "http://tieto.com/bix/")
        String ownerId);

    /**
     * Operation GetStatus: To be used when an external system wants to do continuously status updates on a specific message flow.
     * 				Return data: TransferId as STRING, StatusCode as STRING, StatusDescription as STRING.
     * 			
     * 
     * @param transferId
     * @param connection
     * @return
     *     returns se.teis.proxy.Status
     */
    @WebMethod(operationName = "GetStatus", action = "http://tieto.com/bix/IBixEnvelope/GetStatus")
    @WebResult(name = "GetStatusResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "GetStatus", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetStatus")
    @ResponseWrapper(localName = "GetStatusResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetStatusResponse")
    public Status getStatus(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "TransferId", targetNamespace = "http://tieto.com/bix/")
        String transferId);

    /**
     * Operation GetMessage: To be used when an external system wants to fetch information synchronizly or asynchronizly.
     * 				Return data: Mode as STRING, Message as BYTE array.
     * 			
     * 
     * @param connection
     * @param mode
     * @return
     *     returns byte[]
     */
    @WebMethod(operationName = "GetMessage", action = "http://tieto.com/bix/IBixEnvelope/GetMessage")
    @WebResult(name = "GetMessageResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "GetMessage", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetMessage")
    @ResponseWrapper(localName = "GetMessageResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.GetMessageResponse")
    public byte[] getMessage(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "Mode", targetNamespace = "http://tieto.com/bix/")
        String mode);

    /**
     * Operation QuestionAnswer: To be used when an external system wants to ask for some information synchronizly - Question/Answer type of
     * 				questions. Returns zero to several AnwserData instances.
     * 				Return data: Tag as STRING, Value as string.
     * 			
     * 
     * @param connection
     * @param questions
     * @param questionType
     * @return
     *     returns se.teis.proxy.ArrayOfAnswerData
     */
    @WebMethod(operationName = "QuestionAnswer", action = "http://tieto.com/bix/IBixEnvelope/QuestionAnswer")
    @WebResult(name = "QuestionAnswerResult", targetNamespace = "http://tieto.com/bix/")
    @RequestWrapper(localName = "QuestionAnswer", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.QuestionAnswer")
    @ResponseWrapper(localName = "QuestionAnswerResponse", targetNamespace = "http://tieto.com/bix/", className = "se.teis.proxy.QuestionAnswerResponse")
    public ArrayOfAnswerData questionAnswer(
        @WebParam(name = "connection", targetNamespace = "http://tieto.com/bix/")
        Connection connection,
        @WebParam(name = "QuestionType", targetNamespace = "http://tieto.com/bix/")
        String questionType,
        @WebParam(name = "Questions", targetNamespace = "http://tieto.com/bix/")
        ArrayOfQuestionData questions);

}
